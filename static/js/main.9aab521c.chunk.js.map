{"version":3,"sources":["components/ZeroPacker.jsx","coder.js","App.js","index.js"],"names":["ZeroPacker","state","_this","props","defaults","IDS","leader","symbols","textToPacked","packedFromText","packedToText","textFromPacked","getSymbols","length","getEncoded","stringForEncoding","base","Math","min","charCodes","split","map","char","charCodeAt","toString","numberInBase","index","parseInt","join","concat","encodeToSymbols","getDecoded","stringForDecoding","slice","encodedNumber","asciiNumber","indexOf","asciiCode","String","fromCharCode","decodeFromSymbols","changeHandler","name","initialValue","value","filter","i","arr","setState","Object","defineProperty","move","selectAll","control","setSelectionRange","react_default","a","createElement","Fragment","es","setters","this","setHandler","className","key","onChange","onFocus","id","label","multiLine","readOnly","type","onClick","React","Component","DEFAULTS","uCode","SETTERS","Zero-width symbols with leading zero","Comma separated unicode codes","Arbitrary symbols","More","App","ZeroPacker_ZeroPacker","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9aab521c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Connector, Input, SettersBlock } from 'state-control'\nimport { decodeFromSymbols, encodeToSymbols } from '../coder'\nimport './ZeroPacker.css'\n\nexport default class ZeroPacker extends React.Component {\n    static propTypes = {\n        defaults: PropTypes.objectOf(PropTypes.string).isRequired,\n        setters: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n    }\n\n    state = this.props.defaults\n\n    IDS = {\n        leader: 'leader',\n        symbols: 'symbols',\n        textToPacked: 'textToPacked',\n        packedFromText: 'packedFromText',\n        packedToText: 'packedToText',\n        textFromPacked: 'textFromPacked',\n    }\n\n    getSymbols = () => (this.state.symbols.length > 2 ? this.state.symbols : this.props.defaults.symbols)\n\n    getEncoded = () => encodeToSymbols(this.state.textToPacked, this.getSymbols(), this.state.leader)\n\n    getDecoded = () => decodeFromSymbols(this.state.packedToText, this.getSymbols(), this.state.leader)\n\n    changeHandler = (name, initialValue) => {\n        let value = initialValue.toString()\n\n        switch (name) {\n            case this.IDS.leader:\n                value = value.slice(-1)\n                break\n            case this.IDS.symbols:\n                value = value\n                    .split('')\n                    .filter((char, i, arr) => arr.indexOf(char) === i && char !== this.state.leader)\n                    .join('')\n                    .slice(-36)\n                break\n            default:\n        }\n\n        this.setState({ [name]: value })\n    }\n\n    move = () => {\n        this.setState({ [this.IDS.packedToText]: this.getEncoded() })\n    }\n\n    selectAll = (control) => control.setSelectionRange(0, control.value.length)\n\n    render () {\n        return (\n            <>\n                <SettersBlock\n                    setters={this.props.setters}\n                    setHandler={this.changeHandler}\n                    className=\"state-control-setters\"\n                    key=\"setters\"\n                />\n                <Connector\n                    state={this.state}\n                    onChange={this.changeHandler}\n                    onFocus={this.selectAll}\n                    className=\"state-control-input\"\n                    key=\"connector\"\n                >\n                    <Input\n                        id={this.IDS.leader}\n                        label=\"Leading symbol\"\n                    />\n                    <div className=\"arrow\">+</div>\n                    <Input\n                        id={this.IDS.symbols}\n                        label=\"Symbols for packing\"\n                    />\n                    <Input\n                        id={this.IDS.textToPacked}\n                        label=\"Text\"\n                        multiLine\n                    />\n                    <div className=\"arrow\">→</div>\n                    <Input\n                        id={this.IDS.packedFromText}\n                        label=\"Packed\"\n                        value={this.getEncoded()}\n                        readOnly\n                        multiLine\n                    />\n                    <button type=\"button\" className=\"move-button\" onClick={this.move}>Copy packed ↓</button>\n                    <Input\n                        id={this.IDS.packedToText}\n                        label=\"Packed\"\n                        multiLine\n                    />\n                    <div className=\"arrow\">→</div>\n                    <Input\n                        id={this.IDS.textFromPacked}\n                        label=\"Text\"\n                        value={this.getDecoded()}\n                        readOnly\n                        multiLine\n                    />\n                </Connector>\n            </>\n        )\n    }\n}\n","export function encodeToSymbols (stringForEncoding, symbols, leader) {\r\n    const base = Math.min(symbols.length - 1, 36) // 16\r\n    const charCodes = stringForEncoding // '«test»'\r\n        .split('') // ['«', 't', 'e', 's', 't', '»']\r\n        .map((char) => char // '«'\r\n            .charCodeAt(0) // 171\r\n            .toString(base) // 'ab'\r\n            .split('') // ['a', 'b']\r\n            .map((numberInBase) => {\r\n                const index = parseInt(numberInBase, base) // 10\r\n                return symbols[index] // 'a'\r\n            })\r\n            .join('') // 'ab'\r\n        )\r\n\r\n    return `${leader}${charCodes.join(symbols[base])}` // '0abg74g65g73g74gbb'\r\n}\r\n\r\nexport function decodeFromSymbols (stringForDecoding, symbols, leader) {\r\n    const base = Math.min(symbols.length - 1, 36) // 16\r\n\r\n    return stringForDecoding // '0abg74g65g73g74gbb'\r\n        .slice(leader.length) // 'abg74g65g73g74gbb'\r\n        .split(symbols[base]) // ['ab', '74', '65', '73', '74', 'bb']\r\n        .map((encodedNumber) => {\r\n            const asciiNumber = encodedNumber // 'ab'\r\n                .split('') // ['a', 'b']\r\n                .map((char) => { // 'a'\r\n                    const index = symbols.indexOf(char) // 10\r\n                    return index.toString(base) // 'a'\r\n                })\r\n                .join('') // 'ab'\r\n            const asciiCode = parseInt(asciiNumber, base) // 171\r\n            return String.fromCharCode(asciiCode) // '«'\r\n        })\r\n        .join('') // '«test»'\r\n}\r\n","import React from 'react'\r\nimport ZeroPacker from './components/ZeroPacker'\r\n\r\nconst DEFAULTS = {\r\n    leader: '0',\r\n    symbols: [\r\n        0x2060,\r\n        0x2061,\r\n        0x2062,\r\n        0x2063,\r\n        0x180E,\r\n        0x200B,\r\n        0x200C,\r\n        0x200D,\r\n        0xFEFF,\r\n    ].map((uCode) => String.fromCharCode(uCode)).join(''),\r\n    textToPacked: '“test”',\r\n    packedToText: '',\r\n}\r\n\r\nconst SETTERS = {\r\n    'Zero-width symbols with leading zero': {\r\n        leader: DEFAULTS.leader,\r\n        symbols: DEFAULTS.symbols,\r\n    },\r\n    'Comma separated unicode codes': {\r\n        leader: '',\r\n        symbols: '0123456789,',\r\n    },\r\n    'Arbitrary symbols': {\r\n        leader: '',\r\n        symbols: '↑↓←→BA ',\r\n    },\r\n    More: {\r\n        leader: '',\r\n        symbols: '·•×⌀',\r\n    },\r\n}\r\n\r\nconst App = () => (\r\n    <ZeroPacker\r\n        defaults={DEFAULTS}\r\n        setters={SETTERS}\r\n    />\r\n)\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}